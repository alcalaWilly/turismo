// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../home/visitas/datoVistas/visitasDB.dart';
import 'entities/person.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6674928056527261676),
      name: 'Person',
      lastPropertyId: const obx_int.IdUid(11, 1114503438362001676),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 494067606271025685),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3794756793509335736),
            name: 'mongoId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2733133401092111247),
            name: 'dni',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6289705311291086244),
            name: 'pasaporte',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6296259698047671743),
            name: 'celular',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6255555542293659754),
            name: 'usuario',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8115618835884056272),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8775970976788908647),
            name: 'lugarVista',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6062379925733111011),
            name: 'motivos',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7290342971168488219),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1114503438362001676),
            name: 'syncPending',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4612990205913745725),
      name: 'Visita',
      lastPropertyId: const obx_int.IdUid(5, 4324325992541449761),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4051389909940324776),
            name: 'ide',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2819719447479312635),
            name: 'mongoId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6316002444966545678),
            name: 'nombreLugar',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6646447735557231208),
            name: 'fechaVisita',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4324325992541449761),
            name: 'syncPending',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 4612990205913745725),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Person: obx_int.EntityDefinition<Person>(
        model: _entities[0],
        toOneRelations: (Person object) => [],
        toManyRelations: (Person object) => {},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final mongoIdOffset =
              object.mongoId == null ? null : fbb.writeString(object.mongoId!);
          final dniOffset = fbb.writeString(object.dni);
          final pasaporteOffset = fbb.writeString(object.pasaporte);
          final celularOffset = fbb.writeString(object.celular);
          final usuarioOffset = fbb.writeString(object.usuario);
          final passwordOffset = fbb.writeString(object.password);
          final lugarVistaOffset = object.lugarVista == null
              ? null
              : fbb.writeList(object.lugarVista!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final motivosOffset = object.motivos == null
              ? null
              : fbb.writeList(
                  object.motivos!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mongoIdOffset);
          fbb.addOffset(2, dniOffset);
          fbb.addOffset(3, pasaporteOffset);
          fbb.addOffset(4, celularOffset);
          fbb.addOffset(5, usuarioOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.addOffset(7, lugarVistaOffset);
          fbb.addOffset(8, motivosOffset);
          fbb.addInt64(9, object.updatedAt.millisecondsSinceEpoch);
          fbb.addBool(10, object.syncPending);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final mongoIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final dniParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pasaporteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final celularParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final usuarioParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final lugarVistaParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final motivosParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20);
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final syncPendingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = Person(
              id: idParam,
              mongoId: mongoIdParam,
              dni: dniParam,
              pasaporte: pasaporteParam,
              celular: celularParam,
              usuario: usuarioParam,
              password: passwordParam,
              lugarVista: lugarVistaParam,
              motivos: motivosParam,
              updatedAt: updatedAtParam,
              syncPending: syncPendingParam);

          return object;
        }),
    Visita: obx_int.EntityDefinition<Visita>(
        model: _entities[1],
        toOneRelations: (Visita object) => [],
        toManyRelations: (Visita object) => {},
        getId: (Visita object) => object.ide,
        setId: (Visita object, int id) {
          object.ide = id;
        },
        objectToFB: (Visita object, fb.Builder fbb) {
          final mongoIdOffset =
              object.mongoId == null ? null : fbb.writeString(object.mongoId!);
          final nombreLugarOffset = fbb.writeString(object.nombreLugar);
          fbb.startTable(6);
          fbb.addInt64(0, object.ide);
          fbb.addOffset(1, mongoIdOffset);
          fbb.addOffset(2, nombreLugarOffset);
          fbb.addInt64(3, object.fechaVisita.millisecondsSinceEpoch);
          fbb.addBool(4, object.syncPending);
          fbb.finish(fbb.endTable());
          return object.ide;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final ideParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final mongoIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nombreLugarParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final fechaVisitaParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final syncPendingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = Visita(
              ide: ideParam,
              mongoId: mongoIdParam,
              nombreLugar: nombreLugarParam,
              fechaVisita: fechaVisitaParam,
              syncPending: syncPendingParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// See [Person.id].
  static final id =
      obx.QueryIntegerProperty<Person>(_entities[0].properties[0]);

  /// See [Person.mongoId].
  static final mongoId =
      obx.QueryStringProperty<Person>(_entities[0].properties[1]);

  /// See [Person.dni].
  static final dni =
      obx.QueryStringProperty<Person>(_entities[0].properties[2]);

  /// See [Person.pasaporte].
  static final pasaporte =
      obx.QueryStringProperty<Person>(_entities[0].properties[3]);

  /// See [Person.celular].
  static final celular =
      obx.QueryStringProperty<Person>(_entities[0].properties[4]);

  /// See [Person.usuario].
  static final usuario =
      obx.QueryStringProperty<Person>(_entities[0].properties[5]);

  /// See [Person.password].
  static final password =
      obx.QueryStringProperty<Person>(_entities[0].properties[6]);

  /// See [Person.lugarVista].
  static final lugarVista =
      obx.QueryStringVectorProperty<Person>(_entities[0].properties[7]);

  /// See [Person.motivos].
  static final motivos =
      obx.QueryStringVectorProperty<Person>(_entities[0].properties[8]);

  /// See [Person.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Person>(_entities[0].properties[9]);

  /// See [Person.syncPending].
  static final syncPending =
      obx.QueryBooleanProperty<Person>(_entities[0].properties[10]);
}

/// [Visita] entity fields to define ObjectBox queries.
class Visita_ {
  /// See [Visita.ide].
  static final ide =
      obx.QueryIntegerProperty<Visita>(_entities[1].properties[0]);

  /// See [Visita.mongoId].
  static final mongoId =
      obx.QueryStringProperty<Visita>(_entities[1].properties[1]);

  /// See [Visita.nombreLugar].
  static final nombreLugar =
      obx.QueryStringProperty<Visita>(_entities[1].properties[2]);

  /// See [Visita.fechaVisita].
  static final fechaVisita =
      obx.QueryDateProperty<Visita>(_entities[1].properties[3]);

  /// See [Visita.syncPending].
  static final syncPending =
      obx.QueryBooleanProperty<Visita>(_entities[1].properties[4]);
}
